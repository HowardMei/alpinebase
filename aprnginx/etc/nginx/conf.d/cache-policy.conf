# Cache expire rules:
# This mirrors that of apache h5bp .htaccess file. 
# However, nginx applies rules by location, the apache rules are defined by type. 
# If you use no file extension in the url and serve html, with apache you get an
# expire time of 0s, with nginx you'd get an expire header of one month in the
# future (if the default expire rule is 1 month). Therefore, do not use a
# default expire rule with nginx unless your site is completely static

# Cache: Appcache, your document html and data
	location ~* \.(?:manifest|appcache|html?|xml|json)$ {
	  expires 		-1;
	  access_log 	/var/log/nginx/access.log;
	}

# Cache: Feed
	location ~* \.(?:rss|atom)$ {
	  expires 		1h;
	  add_header 	Cache-Control "public";
	}

# Cache: images, icons, video, audio, HTC
	location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
	  expires 		1M;
	  access_log 	off;
	  add_header 	Cache-Control 	"public";
	}

# Cache: CSS and Javascript
	location ~* \.(?:css|js)$ {
	  expires 		1y;
	  access_log 	off;
	  add_header 	Cache-Control 	"public";
	}

# Cache: Cross domain webfont access
	location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
# For better security, you may selectively allow access based on [sub]domain:
	  # add_header "Access-Control-Allow-Origin" "subdomain.example.com";

	  # See http://wiki.nginx.org/HttpCoreModule#location
	  # And https://github.com/h5bp/server-configs/issues/85
	  # And https://github.com/h5bp/server-configs/issues/86
	  expires 		1M;
	  access_log 	off;
	  add_header 	Cache-Control 	"public";
	}

# Cache busting support:
# https://github.com/h5bp/html5-boilerplate/blob/5370479476dceae7cc3ea105946536d6bc0ee468/.htaccess#L403
# This will route all requests for /css/style.20120716.css to /css/style.css
# Read also this: github.com/h5bp/html5-boilerplate/wiki/cachebusting
	location ~* (.+)\.(?:\d+)\.(js|css|png|jpg|jpeg|gif)$ {
	  try_files 	$uri 	$1.$2;
	}

# This tells Nginx to cache open file handles, "not found" errors, metadata about files and their permissions, etc.
# The upside of this is that Nginx can immediately begin sending data when a popular file is requested,
# and will also know to immediately send a 404 if a file is missing on disk, and so on.
# However, it also means that the server won't react immediately to changes on disk, which may be undesirable.
# In the below configuration, inactive files are released from the cache after 20 seconds, whereas
# active (recently requested) files are re-validated every 30 seconds.
# Descriptors will not be cached unless they are used at least 2 times within 20 seconds (the inactive time).
# A maximum of the 1000 most recently used file descriptors can be cached at any time.
# Production servers with stable file collections will definitely want to enable the cache.
open_file_cache          				max=1000 inactive=20s;
open_file_cache_valid    				30s;
open_file_cache_min_uses 				2;
open_file_cache_errors   				on;

